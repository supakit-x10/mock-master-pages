"use client";

import {
  Alert,
  Button,
  Divider,
  Flex,
  Form,
  Input,
  InputRef,
  QRCode,
  Typography,
  theme,
} from "antd";
import { observer } from "mobx-react";
import { NextPage } from "next";
import { useRouter } from "next/navigation";
import { useEffect, useRef, useState } from "react";
import { useTranslation } from "react-i18next";
import { IoQrCode } from "react-icons/io5";
import AuthLayout from "../../../../components/AuthLayout";
import { PageName } from "../../../../i18n/types";
import { OpenidVerifyQuery } from "../../../../repositories/types/openid/openid-verify-query.type";
import { Params } from "../../../../types/params.type";
import { Path } from "../../../../types/path.enum";
import loginViewModel from "../login/login.viewmodel";
import securityVerificationViewModel from "./security-verification.viewmodel";

interface Props extends Params {}

interface FromInput {
  code: string;
}

const SecurityVerificationPage: NextPage<Props> = ({ searchParams }) => {
  const router = useRouter();
  const inputRef = useRef<InputRef>(null);
  const [isReady, setIsReady] = useState(false);

  const { t } = useTranslation(PageName.TwoFactor);
  const {
    token: { colorPrimary },
  } = theme.useToken();
  const { error, isQrcode, qrcode, message, isLoading } =
    securityVerificationViewModel;

  const { application } = loginViewModel;

  const submit = async (val: FromInput) => {
    const { invalid, redirect } = await securityVerificationViewModel.verify(
      val.code,
      searchParams
    );
    if (!invalid) return;
    router.push(redirect);
  };

  const verify = async (val: OpenidVerifyQuery) => {
    const result = await loginViewModel.verify(val);
    if (result.error) {
      return router.push(Path.Unauthorized);
    }
    setIsReady(!result.error);
  };

  const generateQrcode = async () => {
    const result = await securityVerificationViewModel.generateQrcode();
    if (!result) {
      router.push(Path.Unauthorized);
    }
  };

  useEffect(() => {
    generateQrcode();
    inputRef.current?.focus();

    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  useEffect(() => {
    if (searchParams?.response_type && searchParams?.redirect_uri) {
      verify(searchParams);
    } else {
      setIsReady(true);
    }

    return () => {};

    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  if (!isReady) return <></>;

  return (
    <AuthLayout
      icon={<IoQrCode size={18} color={colorPrimary} />}
      title={application.name || "Ums"}
      subTitle={t("title")}
      description={t("description")}
      submit={submit}
      requiredMark={false}
    >
      {isQrcode && (
        <>
          <Flex gap={8} vertical>
            <Typography.Text>
              1. Install the Google Authenticator application. on your mobile
            </Typography.Text>
            <Typography.Text>
              2. Open the application and sacn thecode:
            </Typography.Text>
          </Flex>
          <Flex gap={16} vertical align="center">
            <QRCode value={qrcode} />
            <Typography.Text strong>Authenticate Your Account</Typography.Text>
          </Flex>
        </>
      )}
      {error && <Alert message={message} banner closable />}
      <div>
        <Form.Item
          label="Code"
          name="code"
          extra="Enter the 6-digit code generated by the app"
          rules={[{ required: true, message: "Please input your Code!" }]}
        >
          <Input size="large" type="number" maxLength={6} ref={inputRef} />
        </Form.Item>

        <Button
          size="large"
          type="primary"
          htmlType="submit"
          loading={isLoading}
          block
        >
          {t("btnSubmit")}
        </Button>
        {!isQrcode && (
          <>
            <Divider plain>or</Divider>
            <Button
              type="link"
              block
              color="primary"
              onClick={() => {
                router.push(Path.ResetTwoFactor);
              }}
            >
              {t("btnResetTwoFactor")}
            </Button>
          </>
        )}
      </div>
    </AuthLayout>
  );
};

export default observer(SecurityVerificationPage);
